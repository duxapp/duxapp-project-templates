diff --git a/node_modules/@tarojs/taro-rn/dist/lib/compressImage/index.js b/node_modules/@tarojs/taro-rn/dist/lib/compressImage/index.js
index 9549762..daf8ffb 100644
--- a/node_modules/@tarojs/taro-rn/dist/lib/compressImage/index.js
+++ b/node_modules/@tarojs/taro-rn/dist/lib/compressImage/index.js
@@ -7,7 +7,7 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
-import ImageResizer from '@bam.tech/react-native-image-resizer';
+import { manipulateAsync, SaveFormat } from 'expo-image-manipulator';
 import { Image } from 'react-native';
 import { errorHandler, successHandler } from '../../utils';
 /**
@@ -20,8 +20,13 @@ export function compressImage(opt) {
         const res = { errMsg: 'compressImage:ok', tempFilePath: '' };
         const _createResizedImage = (...args_1) => __awaiter(this, [...args_1], void 0, function* (width = 800, height = 800) {
             try {
-                const compressFormat = src.toLocaleLowerCase().endsWith('.png') ? 'PNG' : 'JPEG';
-                const { uri } = yield ImageResizer.createResizedImage(src, width, height, compressFormat, quality);
+                const compressFormat = src.toLocaleLowerCase().endsWith('.png') ? SaveFormat.PNG : SaveFormat.JPEG;
+                const { uri } = yield manipulateAsync(src, [
+                  { resize: { width, height }}
+                ], {
+                  compress: quality,
+                  format: compressFormat
+                });
                 res.tempFilePath = uri;
                 return successHandler(success, complete)(res);
             }
diff --git a/node_modules/@tarojs/taro-rn/dist/lib/media.js b/node_modules/@tarojs/taro-rn/dist/lib/media.js
index a3d10bf..b2ff831 100644
--- a/node_modules/@tarojs/taro-rn/dist/lib/media.js
+++ b/node_modules/@tarojs/taro-rn/dist/lib/media.js
@@ -24,7 +24,7 @@ export function saveMedia(opts, type, API) {
         const res = { errMsg: `${API}:ok` };
         const saveType = (type === 'video' || type === 'photo') ? type : 'auto';
         try {
-            const url = yield CameraRoll.save(filePath, { type: saveType });
+            const url = yield CameraRoll.saveAsset(filePath, { type: saveType });
             res.path = url;
             return successHandler(success, complete)(res);
         }
diff --git a/node_modules/@tarojs/taro-rn/dist/lib/previewImage/index.js b/node_modules/@tarojs/taro-rn/dist/lib/previewImage/index.js
index 42d0c87..f61dfec 100644
--- a/node_modules/@tarojs/taro-rn/dist/lib/previewImage/index.js
+++ b/node_modules/@tarojs/taro-rn/dist/lib/previewImage/index.js
@@ -76,7 +76,8 @@ export function previewImage(obj) {
                 }, loadingRender: () => {
                     return (React.createElement(View, { style: { flex: 1, justifyContent: 'center', alignItems: 'center' } },
                         React.createElement(ActivityIndicator, { size: "large", color: '#999' })));
-                } })));
+                },
+                enablePreload: true })));
     }
     catch (e) {
         onFail(e);
diff --git a/node_modules/@tarojs/taro-rn/dist/lib/scanCode/index.js b/node_modules/@tarojs/taro-rn/dist/lib/scanCode/index.js
index 715d9a9..69c5341 100644
--- a/node_modules/@tarojs/taro-rn/dist/lib/scanCode/index.js
+++ b/node_modules/@tarojs/taro-rn/dist/lib/scanCode/index.js
@@ -7,8 +7,7 @@ var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, ge
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 };
-import { BarCodeScanner, requestPermissionsAsync } from 'expo-barcode-scanner';
-import { CameraView } from 'expo-camera';
+import { CameraView, Camera } from 'expo-camera';
 import React from 'react';
 import { BackHandler, Dimensions, Image, Platform, StatusBar, StyleSheet, TouchableOpacity, View } from 'react-native';
 import RootSiblings from 'react-native-root-siblings';
@@ -44,7 +43,23 @@ const typeMap = {
     datamatrix: ['datamatrix'],
     pdf417: ['pdf417']
 };
-const BarCodeType = BarCodeScanner.Constants.BarCodeType;
+
+const BarCodeType = {
+  aztec: 'aztec' ,
+  ean13: 'ean13',
+  ean8: 'ean8',
+  qr: 'qr',
+  pdf417: 'pdf417' ,
+  upc_e: 'upc_e',
+  datamatrix: 'datamatrix',
+  code39: 'code39',
+  code93: 'code93',
+  itf14: 'itf14',
+  codabar: 'codabar',
+  code128: 'code128',
+  upc_a: 'upc_a'
+};
+
 function findKey(value, data, compare = (a, b) => a === b) {
     return Object.keys(data).find(k => compare(data[k], value)) || '';
 }
@@ -133,7 +148,7 @@ function scanFromPhoto(callback, errorCallBack) {
         success: function (res) {
             const imageUrl = res.tempFilePaths[0];
             if (imageUrl) {
-                BarCodeScanner.scanFromURLAsync(imageUrl).then(res => {
+              Camera.scanFromURLAsync(imageUrl).then(res => {
                     res && res.length > 0 && callback(res[0].data, res[0].type);
                 });
             }
@@ -143,7 +158,7 @@ function scanFromPhoto(callback, errorCallBack) {
 export function scanCode() {
     return __awaiter(this, arguments, void 0, function* (option = {}) {
         const { success, fail, complete, onlyFromCamera, scanType = ['barCode', 'qrCode'] } = option;
-        const { granted } = yield requestPermissionsAsync();
+        const { granted } = yield Camera.requestCameraPermissionsAsync();
         if (!granted) {
             const res = { errMsg: 'Permissions denied!' };
             fail === null || fail === void 0 ? void 0 : fail(res);
