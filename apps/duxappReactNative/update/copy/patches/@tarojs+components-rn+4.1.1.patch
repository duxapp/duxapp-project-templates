diff --git a/node_modules/@tarojs/components-rn/dist/components/Image/index.js b/node_modules/@tarojs/components-rn/dist/components/Image/index.js
index bc2ae99..41288c3 100644
--- a/node_modules/@tarojs/components-rn/dist/components/Image/index.js
+++ b/node_modules/@tarojs/components-rn/dist/components/Image/index.js
@@ -16,30 +16,20 @@
 import * as React from 'react';
 import { useCallback, useEffect, useRef, useState } from 'react';
 import { Image, StyleSheet } from 'react-native';
+import { Image as ExpoImage } from 'expo-image';
 import { omit } from '../../utils';
 import useClickable from '../hooks/useClickable';
-// fix: https://github.com/facebook/metro/issues/836
-// 保证 react-native-svg 是最后一个依赖
 const omitProp = (props) => {
     return omit(props, ['source', 'src', 'resizeMode', 'onLoad', 'onError', 'onLayout', 'style']);
 };
 const resizeModeMap = {
-    scaleToFill: 'stretch',
+    scaleToFill: 'fill',
     aspectFit: 'contain',
     aspectFill: 'cover',
-    center: 'center',
+    center: 'none',
     // And widthFix
     // Not supported value...
 };
-let SvgCssUri, WithLocalSvg;
-// react-native-svg is optional
-try {
-    // eslint-disable-next-line @typescript-eslint/no-var-requires
-    const svg = require('react-native-svg');
-    SvgCssUri = svg.SvgCssUri;
-    WithLocalSvg = svg.WithLocalSvg;
-}
-catch (e) { }
 const _Image = (props = {
     src: '',
     mode: 'scaleToFill'
@@ -49,8 +39,9 @@ const _Image = (props = {
     });
     const [ratio, setRatio] = useState(0);
     const [layoutWidth, setLayoutWidth] = useState(0);
+    const [layoutHeight, setLayoutHeight] = useState(0);
     const newProps = useClickable(props);
-    const { style, src, mode = 'scaleToFill', svg = false, onLoad, onError } = newProps;
+    const { style, src, mode = 'scaleToFill', onLoad, onError } = newProps;
     const _onError = useCallback(() => {
         if (!onError)
             return;
@@ -81,12 +72,13 @@ const _Image = (props = {
         }
     }, [onLoad]);
     const onLayout = (event) => {
-        const { width: layoutWidth } = event.nativeEvent.layout;
+        const { width: layoutWidth, height: layoutHeight } = event.nativeEvent.layout;
         const flattenStyle = StyleSheet.flatten(style) || {};
         if (mode === 'widthFix' && typeof flattenStyle.width === 'string') {
             if (ref.current.hasLayout)
                 return;
             setLayoutWidth(layoutWidth);
+            setLayoutHeight(layoutHeight);
         }
         if (ratio) {
             ref.current.hasLayout = true;
@@ -117,19 +109,10 @@ const _Image = (props = {
     const flattenStyle = StyleSheet.flatten(style) || {};
     const defaultWidth = flattenStyle.width || 300;
     const defaultHeight = flattenStyle.height || 225;
-    // remote svg image support, svg 图片暂不支持 mode
-    const remoteSvgReg = /(https?:\/\/.*\.(?:svg|svgx))/i;
-    if (SvgCssUri && typeof src === 'string' && remoteSvgReg.test(src)) {
-        return (React.createElement(SvgCssUri, { uri: src, width: defaultWidth, height: defaultHeight }));
-    }
-    // The parameter passed to require mpxTransformust be a string literal
     const source = typeof src === 'string' ? { uri: src } : src;
-    // local svg image support, svg 图片暂不支持 mode
-    if (WithLocalSvg && svg) {
-        return (React.createElement(WithLocalSvg, { asset: source, width: defaultWidth, height: defaultHeight }));
-    }
     const isWidthFix = mode === 'widthFix';
-    const rMode = (resizeModeMap[mode] || (isWidthFix ? undefined : 'stretch'));
+    const isHeightFix = mode === 'heightFix';
+    const rMode = (resizeModeMap[mode] || (isWidthFix || isHeightFix ? undefined : 'fill'));
     const imageHeight = (() => {
         if (isWidthFix) {
             if (typeof flattenStyle.width === 'string') {
@@ -146,13 +129,27 @@ const _Image = (props = {
             return defaultHeight;
         }
     })();
+    const imageWidth = (() => {
+        if (isHeightFix) {
+            if (typeof flattenStyle.height === 'string') {
+                return layoutHeight / ratio;
+            }
+            else if (typeof flattenStyle.height === 'number') {
+                return flattenStyle.height / ratio;
+            }
+            else {
+                return 300 / ratio;
+            }
+        }
+        else {
+            return defaultWidth;
+        }
+    })();
     const restImageProps = omitProp(newProps);
-    return (React.createElement(Image, Object.assign({ testID: 'image', source: source, resizeMode: rMode, onError: _onError, onLoad: _onLoad, onLayout: onLayout, style: [
-            {
-                width: 300
-            },
+    return (React.createElement(ExpoImage, Object.assign({ testID: 'image', source: source, contentFit: rMode, onError: _onError, onLoad: _onLoad, onLayout: onLayout, style: [
             style,
             {
+                width: imageWidth,
                 height: imageHeight
             }
         ] }, restImageProps)));
diff --git a/node_modules/@tarojs/components-rn/dist/components/Swiper/carousel.js b/node_modules/@tarojs/components-rn/dist/components/Swiper/carousel.js
index e5b2464..698b9f0 100644
--- a/node_modules/@tarojs/components-rn/dist/components/Swiper/carousel.js
+++ b/node_modules/@tarojs/components-rn/dist/components/Swiper/carousel.js
@@ -13,6 +13,9 @@ const styles = StyleSheet.create({
     wrapperStyle: {
         overflow: 'hidden',
     },
+    pageStyle: {
+       flex: 1
+    }
 });
 const INFINITE_BUFFER = 2;
 const exchangePos = Platform.select({
@@ -138,20 +141,17 @@ class Carousel extends React.Component {
         let pages;
         if (count > 1) {
             const childrenArray = React.Children.toArray(children);
+            const childrenArrayData = [...childrenArray];
             if (infinite) {
                 for (let index = 0; index < INFINITE_BUFFER; index++) {
-                    childrenArray.push(React.cloneElement(children[index], { ref: null }));
-                    childrenArray.unshift(React.cloneElement(children[count - index - 1], { ref: null }));
+                    childrenArray.push(React.cloneElement(childrenArrayData[index], { ref: null }));
+                    childrenArray.unshift(React.cloneElement(childrenArrayData[count - index - 1], { ref: null }));
                 }
             }
-            pages = childrenArray.map((page, i) => {
-                return (
-                // when vertical, use the height of the first child as the height of the Carousel
-                React.createElement(View, { key: i }, page));
-            });
+            pages = childrenArray;
         }
         else {
-            pages = React.createElement(View, null, children);
+            pages = children;
         }
         const vpProps = {
             initialPage: selectedIndex,
@@ -204,8 +204,8 @@ class Carousel extends React.Component {
                 }
             },
         };
-        return (React.createElement(View, { style: [styles.wrapperStyle] },
-            React.createElement(ViewPager, Object.assign({}, vpProps, { style: this.props.style,
+        return (React.createElement(View, { style: [styles.wrapperStyle, this.props.style] },
+            React.createElement(ViewPager, Object.assign({}, vpProps, { style: styles.pageStyle,
                 // Lib does not support dynamically orientation change
                 orientation: vertical ? 'vertical' : 'horizontal', ref: this.viewPager }), pages),
             dots && this.renderDots(this.getIndex(selectedIndex, count))));
diff --git a/node_modules/@tarojs/components-rn/dist/components/SwiperItem/styles.js b/node_modules/@tarojs/components-rn/dist/components/SwiperItem/styles.js
index 4992721..76ecf23 100644
--- a/node_modules/@tarojs/components-rn/dist/components/SwiperItem/styles.js
+++ b/node_modules/@tarojs/components-rn/dist/components/SwiperItem/styles.js
@@ -2,8 +2,8 @@ import { StyleSheet } from 'react-native';
 export default StyleSheet.create({
     page: {
         flex: 1,
-        justifyContent: 'center',
-        alignItems: 'center'
+        // justifyContent: 'center',
+        // alignItems: 'center'
     }
 });
 //# sourceMappingURL=styles.js.map
\ No newline at end of file
diff --git a/node_modules/@tarojs/components-rn/dist/components/hooks/useClickable.js b/node_modules/@tarojs/components-rn/dist/components/hooks/useClickable.js
index 3a0243a..84c1040 100644
--- a/node_modules/@tarojs/components-rn/dist/components/hooks/useClickable.js
+++ b/node_modules/@tarojs/components-rn/dist/components/hooks/useClickable.js
@@ -15,11 +15,11 @@ export const clickableHandlers = [
     'onResponderTerminate',
     'onMoveShouldSetResponderCapture',
 ];
-const getWxAppEvent = (event) => {
+const getWxAppEvent = (event, type) => {
     const nativeEvent = event.nativeEvent;
     const { timestamp, target, pageX, pageY, touches = [], changedTouches = [] } = nativeEvent;
     return {
-        type: 'tap',
+        type,
         timeStamp: timestamp,
         target: {
             id: target,
@@ -39,7 +39,9 @@ const getWxAppEvent = (event) => {
                 pageX: item.pageX,
                 pageY: item.pageY,
                 clientX: item.locationX,
-                clientY: item.locationY
+                clientY: item.locationY,
+                x: item.locationX,
+                y: item.locationY
             };
         }),
         changedTouches: changedTouches.map((item) => {
@@ -48,7 +50,9 @@ const getWxAppEvent = (event) => {
                 pageX: item.pageX,
                 pageY: item.pageY,
                 clientX: item.locationX,
-                clientY: item.locationY
+                clientY: item.locationY,
+                x: item.locationX,
+                y: item.locationY
             };
         })
     };
@@ -113,14 +117,18 @@ const useClickable = (props) => {
         onShouldBlockNativeResponder: () => false,
         onPanResponderGrant: (evt) => {
             const { onTouchStart } = ref.current.props;
-            onTouchStart && onTouchStart(getWxAppEvent(evt));
+            onTouchStart && onTouchStart(getWxAppEvent(evt, 'touchstart'));
             ref.current.startTimestamp = evt.nativeEvent.timestamp;
             setStartTimer();
         },
+        onPanResponderMove: (evt) => {
+            const { onTouchMove } = ref.current.props;
+            onTouchMove && onTouchMove(getWxAppEvent(evt, 'touchmove'));
+        },
         onPanResponderTerminationRequest: () => true,
         onPanResponderRelease: (evt, gestureState) => {
             const { onClick, onLongPress, onTouchEnd } = ref.current.props;
-            onTouchEnd && onTouchEnd(getWxAppEvent(evt));
+            onTouchEnd && onTouchEnd(getWxAppEvent(evt, 'touchend'));
             const endTimestamp = evt.nativeEvent.timestamp;
             let gapTime = endTimestamp - ref.current.startTimestamp;
             // 1 =>3, 修复部分android机型(三星折叠屏尤为明显),单击时dx,dy为>1，而被误判为move的情况。
@@ -137,17 +145,17 @@ const useClickable = (props) => {
                     }
                 }
                 if (gapTime <= 350) {
-                    onClick && onClick(getWxAppEvent(evt));
+                    onClick && onClick(getWxAppEvent(evt, 'tap'));
                 }
                 else {
-                    onLongPress && onLongPress(getWxAppEvent(evt));
+                    onLongPress && onLongPress(getWxAppEvent(evt, 'longpress'));
                 }
             }
             setStayTimer();
         },
         onPanResponderTerminate: () => {
-            // const { onTouchCancel } = this.props
-            // onTouchCancel && onTouchCancel(this.getWxAppEvent(evt))
+            const { onTouchCancel } = ref.current.props
+            onTouchCancel && onTouchCancel(getWxAppEvent(evt, 'touchcancel'))
             setStayTimer();
         }
     })).current;
@@ -159,8 +167,8 @@ const useClickable = (props) => {
         'onClick',
         'onLongPress',
         'onTouchStart',
-        // 'onTouchMove',
-        // 'onTouchCancel',
+        'onTouchMove',
+        'onTouchCancel',
         'onTouchEnd'
     ])), panResponder.panHandlers), { style: [{ backgroundColor: 'transparent' }, style, isHover && hoverStyle] });
 };
