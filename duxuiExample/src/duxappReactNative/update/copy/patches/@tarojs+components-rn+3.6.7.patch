diff --git a/node_modules/@tarojs/components-rn/dist/components/Image/index.js b/node_modules/@tarojs/components-rn/dist/components/Image/index.js
index c00448b..8c423a8 100644
--- a/node_modules/@tarojs/components-rn/dist/components/Image/index.js
+++ b/node_modules/@tarojs/components-rn/dist/components/Image/index.js
@@ -39,6 +39,21 @@ try {
     WithLocalSvg = svg.WithLocalSvg;
 }
 catch (e) { }
+/**
+ * 设置全局图片source参数
+ * @param {*} src
+ * @returns
+ */
+const getSource = src => {
+  src = typeof src === 'string' ? { uri: src } : src
+  if(typeof src === 'object' && src !== null && src.uri) {
+    return {
+      ...global.__IMAGE_GLOBAL_SOURCE__,
+      ...src
+    }
+  }
+  return src
+}
 export class _Image extends React.Component {
     constructor() {
         super(...arguments);
@@ -58,7 +73,7 @@ export class _Image extends React.Component {
             if (!onLoad)
                 return;
             if (typeof src === 'string') {
-                Image.getSize(src, (width, height) => {
+                Image.getSizeWithHeaders(src, global.__IMAGE_GLOBAL_SOURCE__?.headers || {}, (width, height) => {
                     onLoad({
                         detail: { width, height }
                     });
@@ -69,7 +84,7 @@ export class _Image extends React.Component {
                 });
             }
             else {
-                const iras = Image.resolveAssetSource(typeof src === 'string' ? { uri: src } : src);
+                const iras = Image.resolveAssetSource(getSource(src));
                 const { width, height } = iras || { width: 0, height: 0 };
                 onLoad({
                     detail: { width, height }
@@ -96,7 +111,7 @@ export class _Image extends React.Component {
             if (mode !== 'widthFix')
                 return;
             if (typeof src === 'string') {
-                Image.getSize(props.src, (width, height) => {
+                Image.getSizeWithHeaders(props.src, global.__IMAGE_GLOBAL_SOURCE__?.headers || {}, (width, height) => {
                     if (this.hasLayout)
                         return;
                     this.setState({
@@ -105,7 +120,7 @@ export class _Image extends React.Component {
                 });
             }
             else {
-                const source = typeof props.src === 'string' ? { uri: props.src } : props.src;
+                const source = getSource(props.src);
                 const { width, height } = Image.resolveAssetSource(source) || {};
                 if (this.hasLayout && !!this.state.ratio)
                     return;
@@ -140,7 +155,7 @@ export class _Image extends React.Component {
             return (React.createElement(SvgCssUri, { uri: src, width: defaultWidth, height: defaultHeight }));
         }
         // The parameter passed to require mpxTransformust be a string literal
-        const source = typeof src === 'string' ? { uri: src } : src;
+        const source = getSource(src);
         // local svg image support, svg 图片暂不支持 mode
         if (WithLocalSvg && svg) {
             return (React.createElement(WithLocalSvg, { asset: source, width: defaultWidth, height: defaultHeight }));
diff --git a/node_modules/@tarojs/components-rn/dist/components/Input/index.js b/node_modules/@tarojs/components-rn/dist/components/Input/index.js
index 1945bb9..656bad9 100644
--- a/node_modules/@tarojs/components-rn/dist/components/Input/index.js
+++ b/node_modules/@tarojs/components-rn/dist/components/Input/index.js
@@ -92,21 +92,21 @@ const _Input = (props) => {
                 setReturnValue(undefined);
             }
         }
-    }, [returnValue]);
+    }, [returnValue, props.onInput, props.onChange]);
     const onFocus = React.useCallback(() => {
         const { onFocus = noop } = props;
         onFocus({
             target: { value: tmpValue.current || '' },
             detail: { value: tmpValue.current || '' }
         });
-    }, [returnValue]);
+    }, [returnValue, props.onFocus]);
     const onBlur = React.useCallback(() => {
         const { onBlur = noop } = props;
         onBlur({
             target: { value: tmpValue.current || '' },
             detail: { value: tmpValue.current || '' }
         });
-    }, []);
+    }, [props.onBlur]);
     /**
      * Callback that is called when a key is pressed.
      * This will be called with `{ nativeEvent: { key: keyValue } }`
@@ -131,7 +131,7 @@ const _Input = (props) => {
             target: { value: tmpValue.current || '' },
             detail: { value: tmpValue.current || '' }
         });
-    }, []);
+    }, [props.onKeyDown, props.onConfirm]);
     const onSubmitEditing = React.useCallback(() => {
         const { onKeyDown = noop, onConfirm = noop } = props;
         if (_multiline)
@@ -145,7 +145,7 @@ const _Input = (props) => {
             target: { value: tmpValue.current || '' },
             detail: { value: tmpValue.current || '' }
         });
-    }, [_multiline]);
+    }, [_multiline, props.onKeyDown, props.onConfirm]);
     const onContentSizeChange = React.useCallback((event) => {
         const { width, height } = event.nativeEvent.contentSize;
         // One of width and height may be 0.
diff --git a/node_modules/@tarojs/components-rn/dist/components/RichText/index.js b/node_modules/@tarojs/components-rn/dist/components/RichText/index.js
index aa4ad37..92c63bb 100644
--- a/node_modules/@tarojs/components-rn/dist/components/RichText/index.js
+++ b/node_modules/@tarojs/components-rn/dist/components/RichText/index.js
@@ -54,7 +54,8 @@ class _RichText extends React.Component {
             window.ReactNativeWebView.postMessage(document.body.scrollHeight);
             true;
           `, onLoadEnd: () => { var _a; return (_a = this.webview.current) === null || _a === void 0 ? void 0 : _a.injectJavaScript('window.ReactNativeWebView.postMessage(document.body.scrollHeight);'); }, style: {
-                    backgroundColor: 'transparent'
+                    backgroundColor: 'transparent',
+                    opacity: 0.99,
                 } }, otherProps))));
     }
 }
diff --git a/node_modules/@tarojs/components-rn/dist/components/Text/index.js b/node_modules/@tarojs/components-rn/dist/components/Text/index.js
index c84f53b..92c42d7 100644
--- a/node_modules/@tarojs/components-rn/dist/components/Text/index.js
+++ b/node_modules/@tarojs/components-rn/dist/components/Text/index.js
@@ -15,10 +15,10 @@ var __rest = (this && this.__rest) || function (s, e) {
     return t;
 };
 import * as React from 'react';
-import { Text } from 'react-native';
+import { Text, Platform } from 'react-native';
 const _Text = (_a) => {
     var { style, children, selectable, onClick } = _a, otherProps = __rest(_a, ["style", "children", "selectable", "onClick"]);
-    return (React.createElement(Text, Object.assign({ selectable: !!selectable, style: style, onPress: onClick }, otherProps), children));
+    return (React.createElement(Text, Object.assign({ selectable: !!selectable, style: [Platform.OS === 'android' ? { fontFamily: '' } : {}, style], onPress: onClick }, otherProps), children));
 };
 _Text.displayName = '_Text';
 export default _Text;
diff --git a/node_modules/@tarojs/components-rn/dist/components/Video/index.js b/node_modules/@tarojs/components-rn/dist/components/Video/index.js
index 94911b5..f19ce5c 100644
--- a/node_modules/@tarojs/components-rn/dist/components/Video/index.js
+++ b/node_modules/@tarojs/components-rn/dist/components/Video/index.js
@@ -228,7 +228,7 @@ class _Video extends Component {
         const { isFullScreen, shouldPlay } = this.state;
         const duration = formatTime(this.props.duration || this.state.duration || null);
         const videoProps = {
-            source: { uri: src },
+            source: { ...global.__VIDEO_GLOBAL_SOURCE__, uri: src },
             shouldPlay: shouldPlay || autoplay,
             posterSource: controls ? { uri: poster } : undefined,
             usePoster: !!controls,
